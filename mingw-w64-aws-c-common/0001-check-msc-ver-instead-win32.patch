--- a/cmake/AwsCFlags.cmake
+++ b/cmake/AwsCFlags.cmake
@@ -53,7 +53,7 @@
         list(APPEND AWS_C_FLAGS "${_FLAGS}")
 
     else()
-        list(APPEND AWS_C_FLAGS -Wall -Werror -Wstrict-prototypes -fno-omit-frame-pointer)
+        list(APPEND AWS_C_FLAGS -Wall -Wstrict-prototypes -fno-omit-frame-pointer)
 
         if(NOT SET_PROPERTIES_NO_WEXTRA)
             list(APPEND AWS_C_FLAGS -Wextra)
--- a/include/aws/common/byte_order.inl
+++ b/include/aws/common/byte_order.inl
@@ -9,11 +9,11 @@
 #include <aws/common/byte_order.h>
 #include <aws/common/common.h>
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 #    include <stdlib.h>
 #else
 #    include <netinet/in.h>
-#endif /* _MSC_VER */
+#endif /* _WIN32 */
 
 AWS_EXTERN_C_BEGIN
 
@@ -39,7 +39,7 @@
     uint64_t v;
     __asm__("bswap %q0" : "=r"(v) : "0"(x));
     return v;
-#elif defined(_MSC_VER)
+#elif defined(_WIN32)
     return _byteswap_uint64(x);
 #else
     uint32_t low = x & UINT32_MAX;
@@ -59,7 +59,7 @@
  * Convert 32 bit integer from host to network byte order.
  */
 AWS_STATIC_IMPL uint32_t aws_hton32(uint32_t x) {
-#ifdef _MSC_VER
+#ifdef _WIN32
     return aws_is_big_endian() ? x : _byteswap_ulong(x);
 #else
     return htonl(x);
@@ -116,7 +116,7 @@
  * Convert 32 bit integer from network to host byte order.
  */
 AWS_STATIC_IMPL uint32_t aws_ntoh32(uint32_t x) {
-#ifdef _MSC_VER
+#ifdef _WIN32
     return aws_is_big_endian() ? x : _byteswap_ulong(x);
 #else
     return ntohl(x);
@@ -141,7 +141,7 @@
  * Convert 16 bit integer from host to network byte order.
  */
 AWS_STATIC_IMPL uint16_t aws_hton16(uint16_t x) {
-#ifdef _MSC_VER
+#ifdef _WIN32
     return aws_is_big_endian() ? x : _byteswap_ushort(x);
 #else
     return htons(x);
@@ -152,7 +152,7 @@
  * Convert 16 bit integer from network to host byte order.
  */
 AWS_STATIC_IMPL uint16_t aws_ntoh16(uint16_t x) {
-#ifdef _MSC_VER
+#ifdef _WIN32
     return aws_is_big_endian() ? x : _byteswap_ushort(x);
 #else
     return ntohs(x);
--- a/source/windows/environment.c
+++ b/source/windows/environment.c
@@ -13,12 +13,16 @@
     const struct aws_string *variable_name,
     struct aws_string **value_out) {
 
+#ifdef _MSC_VER
 #pragma warning(push)
 #pragma warning(disable : 4996)
+#endif
 
     const char *value = getenv(aws_string_c_str(variable_name));
 
+#ifdef _MSC_VER
 #pragma warning(pop)
+#endif
 
     if (value == NULL) {
         *value_out = NULL;
--- a/source/windows/system_info.c
+++ b/source/windows/system_info.c
@@ -61,7 +61,9 @@
 }
 
 /* If I meet the engineer that wrote the dbghelp.h file for the windows 8.1 SDK we're gonna have words! */
+#ifdef _MSC_VER
 #pragma warning(disable : 4091)
+#endif
 #include <dbghelp.h>
 
 struct win_symbol_data {
@@ -145,7 +147,7 @@
     return;
 }
 
-static bool s_init_dbghelp() {
+static bool s_init_dbghelp(void) {
     if (AWS_LIKELY(s_SymInitialize)) {
         return true;
     }
--- a/tests/atomics_test.c
+++ b/tests/atomics_test.c
@@ -13,7 +13,9 @@
 
 #ifdef _WIN32
 #    include <malloc.h>
-#    define alloca _alloca
+#    ifdef _MSC_VER
+#       define alloca _alloca
+#    endif
 #elif defined(__FreeBSD__) || defined(__NetBSD__)
 #    include <stdlib.h>
 #else
